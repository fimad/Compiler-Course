structure Ast = Ast
%%

%name Eval

%header (functor EvalLrValsFun(
            structure Token : TOKEN
            structure Ast : AST) 
        )

%pos int
%eop EOF

%left DIM
%left PRINT
%left SEMICOLON
%left NEG
%left MINUS PLUS
%left MULT DIV
%left AND OR
%left LESS LESSEQ MORE MOREEQ EQ NOT

%term ID of string | BOOL of int | FLOAT of real | INT of int | NEG | ASSIGN
    | PLUS | MULT | DIV | MINUS 
    | AND | OR 
    | LESS | LESSEQ | MORE | MOREEQ | EQ | NOT
    | LPAREN | RPAREN | COMMA
    | IN | LET | FUN
    | IF | THEN | ELSE | END
    | FOR | TO | BY | DO | SEMICOLON
    | EMPTY_ARRAY | START_ARRAY | END_ARRAY | POUND
    | PRINT
    | DIM
    | OF | BAR | TYPE_WORD | CASE | OTHERWISE
    | TYPE_BOOL | TYPE_FLOAT | TYPE_INT | COLON
    | EOF
%nonterm LETDEF of Ast.ast
       | EXP of Ast.ast
       | START of Ast.CompilerTarget
       | PARAMS of (string*LLVM.Type) list
       | EXPLIST of Ast.ast list
       | ARRAY_DIM of int
       | ARRAY_INDEX of Ast.ast
       | TERM of Ast.ast
       | STATEMENT of Ast.ast
       | DO_BLOCK of Ast.ast
       | PRIMITIVE_TYPE of LLVM.Type
       | TYPE of LLVM.Type
       | TYPES of LLVM.UserType list
       | TYPE_DEF of LLVM.UserType
       | TYPE_FORMS of (string*(LLVM.Type list)) list
       | TYPE_FORM of string*(LLVM.Type list)
       | TYPE_LIST of LLVM.Type list
       | ID_LIST of string list
       | CASE_THENS of (string*string list*Ast.ast) list
       | CASE_THEN of string*string list*Ast.ast
       | OTHERWISE_THEN of Ast.ast
       | FUNC_LIST of Ast.Function list
       | FUNC of Ast.Function

%%

START : TYPES FUNC_LIST STATEMENT EOF       (Ast.CompilerTarget (TYPES,FUNC_LIST,STATEMENT))
      | FUNC_LIST STATEMENT EOF             (Ast.CompilerTarget ([],FUNC_LIST,STATEMENT))
      | TYPES STATEMENT EOF                 (Ast.CompilerTarget (TYPES,[],STATEMENT))
      | STATEMENT EOF                       (Ast.CompilerTarget ([],[],STATEMENT))

TYPES : TYPE_DEF                  ([TYPE_DEF])
      | TYPE_DEF TYPES            (TYPE_DEF::TYPES)

TYPE_DEF : TYPE_WORD ID EQ TYPE_FORMS  ((ID,TYPE_FORMS))

TYPE_FORMS : TYPE_FORM                  ([TYPE_FORM])
           | TYPE_FORM BAR TYPE_FORMS   (TYPE_FORM::TYPE_FORMS)

TYPE_FORM : ID OF TYPE_LIST       ((ID,TYPE_LIST))

TYPE_LIST : TYPE                  ([TYPE])
          | TYPE MULT TYPE_LIST   (TYPE::TYPE_LIST)

FUNC_LIST : FUNC                  ([FUNC])
          | FUNC FUNC_LIST        (FUNC::FUNC_LIST)

FUNC : FUN ID LPAREN PARAMS RPAREN COLON TYPE STATEMENT END  ((ID,PARAMS,TYPE,STATEMENT))
     | FUN ID LPAREN RPAREN COLON TYPE STATEMENT END         ((ID,[],TYPE,STATEMENT))

PARAMS : ID COLON TYPE                      ([(ID,TYPE)])
       | ID COLON TYPE COMMA PARAMS          ((ID,TYPE)::PARAMS)

STATEMENT : EXP                   (EXP)
          | DO_BLOCK              (DO_BLOCK)
          | LETDEF                (LETDEF)

DO_BLOCK : DO EXPLIST END         (Ast.Block(EXPLIST))

EXP : TERM                        (TERM)
    (*digit arith*)
    | EXP ARRAY_INDEX             (Ast.ArrayIndex(EXP,ARRAY_INDEX))
    | PRINT EXP                   (Ast.Print(EXP))
    | DIM LPAREN EXP RPAREN       (Ast.Dim(EXP))
    | EXP PLUS EXP                (Ast.Plus(EXP1,EXP2))
    | EXP MINUS EXP               (Ast.Minus(EXP1,EXP2))
    | EXP MULT EXP                (Ast.Mult(EXP1,EXP2))
    | EXP DIV EXP                 (Ast.Div(EXP1,EXP2))
    (*bool arith*)
    | NOT EXP                     (Ast.Not(EXP1))
    | EXP AND EXP                 (Ast.And(EXP1,EXP2))
    | EXP OR EXP                  (Ast.Or(EXP1,EXP2))
    | EXP EQ EXP                  (Ast.Eq(EXP1,EXP2))
    | EXP NOT EQ EXP              (Ast.NotEq(EXP1,EXP2))
    | EXP LESS EXP                (Ast.Less(EXP1,EXP2))
    | EXP LESSEQ EXP              (Ast.LessEq(EXP1,EXP2))
    | EXP MORE EXP                (Ast.More(EXP1,EXP2))
    | EXP MOREEQ EXP              (Ast.MoreEq(EXP1,EXP2))
    | ID ASSIGN EXP               (Ast.Assign(ID,EXP))
    | EXP ARRAY_INDEX ASSIGN EXP  (Ast.AssignArray(EXP1,ARRAY_INDEX,EXP2))
    | IF EXP THEN STATEMENT ELSE STATEMENT   (Ast.If(EXP,STATEMENT1,STATEMENT2))
    | FOR LPAREN EXP SEMICOLON EXP SEMICOLON EXP RPAREN STATEMENT   (Ast.For(EXP1,EXP2,EXP3,STATEMENT1))
    | CASE EXP OF CASE_THENS OTHERWISE_THEN      (Ast.Case(EXP,CASE_THENS,OTHERWISE_THEN))

CASE_THENS : CASE_THEN            ([CASE_THEN])
           | CASE_THEN CASE_THENS (CASE_THEN::CASE_THENS)

CASE_THEN : ID LPAREN ID_LIST RPAREN THEN EXP  (ID,ID_LIST,EXP)

OTHERWISE_THEN : OTHERWISE THEN EXP (EXP)

TERM : ID                         (Ast.Var(ID))
     | NEG INT                    (Ast.Int(0-INT))
     | NEG FLOAT                  (Ast.Float(0.0-FLOAT))
     | INT                        (Ast.Int(INT))
     | FLOAT                      (Ast.Float(FLOAT))
     | BOOL                       (Ast.Bool(BOOL))
     | START_ARRAY TYPE END_ARRAY ARRAY_DIM      (Ast.EmptyArray (TYPE,ARRAY_DIM))
     | START_ARRAY EXPLIST END_ARRAY  (Ast.Array (EXPLIST))
     | LPAREN EXP RPAREN          (EXP)
     | ID LPAREN RPAREN           (Ast.Apply(Ast.Var(ID),[]))
     | ID LPAREN EXPLIST RPAREN   (Ast.Apply(Ast.Var(ID),EXPLIST))

ARRAY_INDEX : START_ARRAY EXP END_ARRAY (EXP)

ARRAY_DIM : POUND INT             (INT)

EXPLIST : EXP                     ([EXP])
        | EXP COMMA EXPLIST       (EXP::EXPLIST)
        | EXP SEMICOLON EXPLIST   (EXP::EXPLIST)
        | EXP EXPLIST             (EXP::EXPLIST)

ID_LIST : ID                      ([ID])
        | ID COMMA ID_LIST        (ID::ID_LIST)

LETDEF : LET ID EQ STATEMENT IN STATEMENT                           (Ast.Let(ID,STATEMENT1,STATEMENT2))

TYPE : PRIMITIVE_TYPE                                         (PRIMITIVE_TYPE)
     | START_ARRAY TYPE END_ARRAY                             (LLVM.array TYPE)
     | ID                                                     (LLVM.usertype ID)

PRIMITIVE_TYPE : TYPE_INT                        (LLVM.i32)
               | TYPE_FLOAT                      (LLVM.float)
               | TYPE_BOOL                       (LLVM.i1)
