structure Ast = Ast
%%

%name Eval

%header (functor EvalLrValsFun(
            structure Token : TOKEN
            structure Ast : AST) 
        )

%pos int
%eop EOF

%left PRINT
%left SEMICOLON
%left NEG
%left MINUS PLUS
%left MULT DIV
%left AND OR
%left LESS LESSEQ MORE MOREEQ EQ NOT

%term ID of string | NUM of int | NEG | ASSIGN
    | PLUS | MULT | DIV | MINUS 
    | AND | OR 
    | LESS | LESSEQ | MORE | MOREEQ | EQ | NOT
    | LPAREN | RPAREN | COMMA
    | IN | LET | FUN
    | IF | THEN | ELSE | END
    | FOR | TO | BY | DO | SEMICOLON
    | EMPTY_ARRAY | START_ARRAY | END_ARRAY | POUND
    | PRINT
    | EOF
%nonterm LETDEF of Ast.ast
       | EXP of Ast.ast
       | START of Ast.ast
       | PARAMS of string list
       | EXPLIST of Ast.ast list
       | ARRAY_DIM of int list
       | ARRAY_INDEX of Ast.ast list
       | TERM of Ast.ast
       | STATEMENT of Ast.ast
       | DO_BLOCK of Ast.ast

%%

START : STATEMENT EOF             (STATEMENT)

STATEMENT : EXP                   (EXP)
          | DO_BLOCK              (DO_BLOCK)
          | LETDEF                (LETDEF)

DO_BLOCK : DO EXPLIST END         (Ast.Block(EXPLIST))

EXP : TERM                        (TERM)
    (*digit arith*)
    | PRINT EXP                   (Ast.Print(EXP))
    | EXP PLUS EXP                (Ast.Plus(EXP1,EXP2))
    | EXP MINUS EXP               (Ast.Minus(EXP1,EXP2))
    | EXP MULT EXP                (Ast.Mult(EXP1,EXP2))
    | EXP DIV EXP                 (Ast.Div(EXP1,EXP2))
    (*bool arith*)
    | NOT EXP                     (Ast.Not(EXP1))
    | EXP AND EXP                 (Ast.And(EXP1,EXP2))
    | EXP OR EXP                  (Ast.Or(EXP1,EXP2))
    | EXP EQ EXP                  (Ast.Eq(EXP1,EXP2))
    | EXP NOT EQ EXP              (Ast.NotEq(EXP1,EXP2))
    | EXP LESS EXP                (Ast.Less(EXP1,EXP2))
    | EXP LESSEQ EXP              (Ast.LessEq(EXP1,EXP2))
    | EXP MORE EXP                (Ast.More(EXP1,EXP2))
    | EXP MOREEQ EXP              (Ast.MoreEq(EXP1,EXP2))
    | ID ASSIGN EXP               (Ast.Assign(ID,EXP))
    | ID ARRAY_INDEX ASSIGN EXP   (Ast.AssignArray(ID,ARRAY_INDEX,EXP))
    | IF EXP THEN STATEMENT ELSE STATEMENT   (Ast.If(EXP,STATEMENT1,STATEMENT2))
    | FOR LPAREN EXP SEMICOLON EXP SEMICOLON EXP RPAREN STATEMENT IN STATEMENT   (Ast.For(EXP1,EXP2,EXP3,STATEMENT1,STATEMENT2))

TERM : ID                         (Ast.Var(ID))
     | ID ARRAY_INDEX             (Ast.ArrayIndex(ID,ARRAY_INDEX))
     | NEG NUM                    (Ast.Num(0-NUM))
     | NUM                        (Ast.Num(NUM))
     | START_ARRAY EXPLIST END_ARRAY  (Ast.Array (EXPLIST))
     | EMPTY_ARRAY ARRAY_DIM      (Ast.EmptyArray (ARRAY_DIM))
     | LPAREN EXP RPAREN          (EXP)
     | ID LPAREN EXPLIST RPAREN   (Ast.Apply(Ast.Var(ID),EXPLIST))

ARRAY_INDEX : START_ARRAY EXP END_ARRAY ([EXP])
            | START_ARRAY EXP END_ARRAY ARRAY_INDEX (EXP::ARRAY_INDEX)

ARRAY_DIM : POUND NUM             ([NUM])
          | POUND NUM ARRAY_DIM   (NUM::ARRAY_DIM)

EXPLIST : EXP                     ([EXP])
        | EXP COMMA EXPLIST       (EXP::EXPLIST)
        | EXP SEMICOLON EXPLIST       (EXP::EXPLIST)


LETDEF : LET ID EQ STATEMENT IN STATEMENT                           (Ast.Let(ID,STATEMENT1,STATEMENT2))
       | FUN ID LPAREN PARAMS RPAREN EQ STATEMENT IN STATEMENT   (Ast.Fun(ID,PARAMS,STATEMENT1,STATEMENT2))

PARAMS : ID                       ([ID])
       | ID COMMA PARAMS          (ID::PARAMS)

